<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/03/05/MySQL/"/>
      <url>/2023/03/05/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><blockquote><p>MySQL必会知识</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据库，表，列和行，数据类型，主键，SQL、</p><p>sql通常不区分大小写，一般关键字用大写，可以分段便于调试</p><h2 id="使用-database，table"><a href="#使用-database，table" class="headerlink" title="使用 [database，table]"></a>使用 [database，table]</h2><ul><li><p>连接mysql<code>mysql -u username -p password</code></p></li><li><p>创建数据库<code> create database create</code></p></li><li><p>设置编码<code>set names utf-8</code></p></li><li><p>导入sql文件(包括插入的数据也可以)<code>source /path/create.sql</code></p></li><li><p>选择数据库<code>use create</code></p></li><li><p>列出数据库的表<code>show tables</code></p></li><li><p>查看指定表的列信息(设计)<code>show columns from customers</code></p></li><li><p>删除数据库<code> drop database create</code></p></li></ul><h2 id="检索数据-select-，limit，offset"><a href="#检索数据-select-，limit，offset" class="headerlink" title="检索数据 [select ，limit，offset]"></a>检索数据 [select ，limit，offset]</h2><ul><li>检索单列<code>select prod_name from products</code></li><li>检索多个列<code>select prod_id,prod_name,prod_price from products</code></li><li>检索所有列<code> select * from products</code></li><li><em><strong>distinct</strong></em>检索不同行，只返回不同的值<code>select distinct vend_id from products</code></li><li><em><strong>limit m</strong></em>限制查询m条数<code>select prod_name from products limit 5</code></li><li><em><strong>limit m,n</strong></em>限制查询从第m条开始到第n条<code>select prod_name from products limit 5,5</code></li><li><em><strong>limit</strong></em>从0开始检索，<em><strong>offset</strong></em>从1开始</li><li><em><strong>offset</strong></em>和<em><strong>limit</strong></em>共用，从第三条记录开始查4条记录<code> limit 4 offset3</code></li></ul><h2 id="排序检索-order-by，desc，asc"><a href="#排序检索-order-by，desc，asc" class="headerlink" title="排序检索 [order by，desc，asc]"></a>排序检索 [order by，desc，asc]</h2><ul><li><p>按指定列以字母顺序排序<code> select prod_name from products order by prod_name</code></p></li><li><p>先按照一个列字母排序，再按照另一个列数字排序<code> select prod_id,prod_name,prod_price from products order by prod_price,prod_name</code></p></li><li><p>字母从a-z，A-Z，大小写不做顺序区分，数字从小到大，多次排序用逗号分开</p></li><li><p>默认升序排列<em><strong>ASC（ascending）</strong></em>，手动降序排列<em><strong>DESC（descending）</strong></em></p></li><li><p>DESC指定先按prod_price降序，再按prod_name升序排列<code>select prod_name,prod_id,prod_price from products order by prod_price desc,prod_name </code></p></li><li><p>order by + limit选择数据库中最大最小的数据，顺序from - order by - limit<code> select product_price from products order by prod_price desc limit 1</code></p></li></ul><h2 id="过滤数据-where，is-null，is-not-null"><a href="#过滤数据-where，is-null，is-not-null" class="headerlink" title="过滤数据 [where，is null，is not null]"></a>过滤数据 [where，is null，is not null]</h2><ul><li>指定搜索条件（过滤条件）使用where<code> select prod_name,prod_price from products where prod_price=2.50</code></li><li>常用where 语句操作符 大于，小于，等于，大于等于，小于等于，不等于（!&#x3D;或者&lt;&gt;），在指定两个值区间之间（between value1 and value2）</li><li>where子句检查空值is null，is not null</li><li>NULL和空字符，空格，0不同</li></ul><h2 id="数据过滤-where，and，or，in，not"><a href="#数据过滤-where，and，or，in，not" class="headerlink" title="数据过滤 [where，and，or，in，not]"></a>数据过滤 [where，and，or，in，not]</h2><ul><li>and 可以连接多个搜索条件</li><li>or 记录满足or左右两边任一条件就行</li><li>and优先级高于or，混用时or最好用括号分开</li><li>in (value1，value2)，in的速度比or快，而且in里面可以写select子句</li><li>not用来否定它之后跟的条件，复杂查询使用not非常方便，可以和in结合使用</li><li>not in ，not between，not exists</li></ul><h2 id="通配符过滤-like，-，"><a href="#通配符过滤-like，-，" class="headerlink" title="通配符过滤[like，%，_ ]"></a>通配符过滤[like，%，_ ]</h2><ul><li><p>like加上通配符的方式进行过滤</p></li><li><p>搜索以jet开头后面不记字符和字符数的数据<code> like &#39;jet%&#39;</code></p></li><li><p>%可以用在搜索条件的前后，如果用在前面的话要注意条件最后是否有空格，如果有要用函数去掉</p></li><li><p>like和%通配符的形式不能匹配NULL</p></li><li><p>下划线通配符和%类似用法，不过只能匹配一个字符</p></li><li><p>注意：1.不要过度使用通配符，能用其他的代替就代替 2.通配符用在搜索模式最前面效率是最差的</p></li></ul><h2 id="正则表达式-REGEXP-待补充"><a href="#正则表达式-REGEXP-待补充" class="headerlink" title="正则表达式 [REGEXP] - 待补充"></a>正则表达式 [REGEXP] - 待补充</h2><ul><li>正则表达式用来匹配复杂文本</li></ul><h2 id="字段拼接与计算-concat-，trim-，加减乘除"><a href="#字段拼接与计算-concat-，trim-，加减乘除" class="headerlink" title="字段拼接与计算[ concat( )，trim( )，加减乘除]"></a>字段拼接与计算[ concat( )，trim( )，加减乘除]</h2><ul><li>trim函数包括，trim( )去掉前后空格，ltrim( )去掉左边空格，rtrim( )去掉右边空格</li><li>concatenate，使用concat( )函数来把多列拼接成一列，concat函数跟在select后面</li><li>检索时使用加减乘除计算列的值</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#拼接vendors的vend_name和vend_country字段</span><br><span class="line"><span class="keyword">select</span> concat(vend_name,<span class="string">&#x27;(&#x27;</span>,vend_country,<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> vendors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#去掉上述拼接字段的前后空格，并给合并后的列取个列名</span><br><span class="line"><span class="keyword">select</span> concat(<span class="built_in">trim</span>(vend_name),<span class="string">&#x27;(&#x27;</span>,<span class="built_in">trim</span>(vend_country),<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">as</span> vend_title</span><br><span class="line"><span class="keyword">from</span> vendors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#计算orderitems表中order_num为<span class="number">20005</span>的订单每个物品的的总价（价格<span class="operator">*</span>数量）</span><br><span class="line"><span class="keyword">select</span> order_num,order_item,prod_id,quantity<span class="operator">*</span>item_price <span class="keyword">as</span> total_price</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">where</span> order_num<span class="operator">=</span><span class="number">20005</span>;</span><br></pre></td></tr></table></figure><h2 id="数据处理函数-……"><a href="#数据处理函数-……" class="headerlink" title="数据处理函数[…….]"></a>数据处理函数[…….]</h2><ul><li>函数的可移植性没有SQL高</li></ul><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><table><thead><tr><th>函数</th><th>说明</th><th>sql例子</th><th>结果</th></tr></thead><tbody><tr><td>left(‘string’,n)</td><td>返回串左边的n个字符</td><td></td><td></td></tr><tr><td>length(‘string’)</td><td>返回串的长度</td><td></td><td></td></tr><tr><td>locate(‘subString’,’string’)</td><td>找出串的一个子串的起始位置</td><td>select locate(‘sb’,’wangtianyushisb’);</td><td>14</td></tr><tr><td>lower(‘string’)</td><td>将串转换为小写</td><td></td><td></td></tr><tr><td>upper(‘string’)</td><td>将串转换为大写</td><td></td><td></td></tr><tr><td>ltrim(  )</td><td>去掉串左边的空格</td><td></td><td></td></tr><tr><td>rtrim(  )</td><td>去掉串右边的空格</td><td></td><td></td></tr><tr><td>right( ‘string’ ,n)</td><td>返回串右边的n个字符</td><td></td><td></td></tr><tr><td>substring(‘string’,start,end)</td><td>返回子串的字符,从start位置开始到end</td><td></td><td></td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><ul><li>数据经常要用日期进行过滤</li><li>mysql插入，更新，过滤数据，日期必须为yyyy-mm-dd格式</li><li>普通方式通过日期查询过滤数据：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">cust_id,order_num</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_date<span class="operator">=</span><span class="string">&#x27;2005-09-01&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>上面这种方式不能查出带具体时间的记录，<span style="color:white;background-color:green;padding:8px;margin:8px;border-radius:8px;shadow-box:0px 0px 3px grey">解决的办法是用查出的记录的部分去跟where条件比较</span>：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,order_num</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> <span class="type">Date</span>(order_date)<span class="operator">=</span><span class="string">&#x27;2005-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>如果只想要日期，用Date(  )函数，如果只想要时间用Time(  )函数</li><li>检索某月某时间段内记录的几种方式<ul><li>使用between操作符</li><li>用Year函数，Month函数切出年和月，然后作为搜索条件</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,order_num</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> <span class="type">Date</span>(order_date)</span><br><span class="line"><span class="keyword">between</span> <span class="string">&#x27;2005-09-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> <span class="string">&#x27;2005-09-30&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#用函数切出年和月,条件定位到月就能查出整月的数据</span><br><span class="line"><span class="keyword">select</span> cust_id,order_num</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">Year</span>(order_date)<span class="operator">=</span><span class="string">&#x27;2005&#x27;</span> <span class="keyword">and</span> <span class="keyword">Month</span>(order_date);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><ul><li>使用不如上面两个多</li></ul><h2 id="汇总数据-avg，count，max，min，sum"><a href="#汇总数据-avg，count，max，min，sum" class="headerlink" title="汇总数据[avg，count，max，min，sum]"></a>汇总数据[avg，count，max，min，sum]</h2><ul><li>5个聚集函数：1.avg(  ) 2.count(  ) 3.max(  ) 4.min(  ) 5.sum(  )</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">avg</span>()</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(prod_price) <span class="keyword">as</span> avg_price</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">count</span>() 使用<span class="built_in">count</span>(<span class="operator">*</span>)时对表中行的数目进行计数，不管表列中包含的是空值还是非空值 使用<span class="built_in">count</span>(<span class="keyword">column</span>)对特定列中具有值的进行技术，忽略<span class="keyword">NULL</span>值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num_cust</span><br><span class="line"><span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#max返回列中最大的值 要求指定列名 <span class="operator">-</span>可以用于文本</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(prod_price) <span class="keyword">as</span> max_price </span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">min</span>()函数，要求指定列名，返回指定列的最小值 <span class="operator">-</span>可以用于文本</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(prod_price) <span class="keyword">as</span> min_price</span><br><span class="line"><span class="keyword">from</span> products</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">sum</span>()用来返回指定列的值的和,sum中还可以进行运算</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(quantity) <span class="keyword">as</span> item_ordered</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">where</span> order_num <span class="operator">=</span> <span class="string">&#x27;20005&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(item_price<span class="operator">*</span>quantity)</span><br><span class="line"><span class="keyword">as</span> total_price</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">where</span> order_num<span class="operator">=</span> <span class="string">&#x27;20005&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>select可以包含多个聚集函数</li><li>聚集函数中可以进行运算并且使用distinct关键字，使用distinct时要指定聚集函数中的列名，对于count(*)不能使用distinct，对于max函数和min函数，使用distinct其实作用不大</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num_items,</span><br><span class="line"><span class="built_in">min</span>(prod_price) <span class="keyword">as</span> min_price,</span><br><span class="line"><span class="built_in">max</span>(prod_price) <span class="keyword">as</span> max_price,</span><br><span class="line"><span class="built_in">avg</span>(prod_price) <span class="keyword">as</span> avg_price</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><h2 id="分组数据-group-by-，order-by"><a href="#分组数据-group-by-，order-by" class="headerlink" title="分组数据[group by ，order by]"></a>分组数据[group by ，order by]</h2><h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><ul><li>group by 可以指定按照某个字段来分组，分组以后可以进行聚集函数操作</li><li>group by 可以指定多个列</li><li>group by后面的列必须是检索列或者有效表达式，不能是聚集函数</li><li>分组列中含有NULL时，NULL会被分成一组返回</li><li>group by 要跟在select后，order by之前</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#选择vend_id,统计记录数，分组</span><br><span class="line"><span class="keyword">select</span> vend_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num_prod</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id</span><br></pre></td></tr></table></figure><h3 id="having分组数据进行过滤"><a href="#having分组数据进行过滤" class="headerlink" title="having分组数据进行过滤"></a>having分组数据进行过滤</h3><ul><li>where作用于行，having作用于分组</li><li>having后的操作和where类似</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#选择vend_id,统计记录数，<span class="keyword">where</span>过滤掉价格<span class="operator">&lt;</span><span class="number">10</span>的，通过vend_id分组，然后<span class="keyword">having</span>过滤掉数量小于<span class="number">2</span>的供应商</span><br><span class="line"><span class="keyword">select</span> vend_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num_prod</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> prod_price<span class="operator">&gt;=</span><span class="number">10</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="select子句使用时遵循的顺序"><a href="#select子句使用时遵循的顺序" class="headerlink" title="select子句使用时遵循的顺序"></a>select子句使用时遵循的顺序</h3><ul><li>select-from-where-group by-having-order by-limit</li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ul><li>有时候in和子查询可以相互替换</li></ul><h3 id="利用子查询进行过滤"><a href="#利用子查询进行过滤" class="headerlink" title="利用子查询进行过滤"></a>利用子查询进行过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="number">20005</span>,<span class="number">20007</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> order_num </span><br><span class="line">    <span class="keyword">from</span> orderitems</span><br><span class="line">    <span class="keyword">where</span> prod_id<span class="operator">=</span> <span class="string">&#x27;TNT2&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h3><ul><li>显示customers表中每个客户的订单总数</li><li>步骤：<ul><li>从customers表中检索客户列表</li><li>对于检索出的每个客户，统计其在orders表中的订单数目</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_state,(</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> orders</span><br><span class="line">    <span class="keyword">where</span> orders.cust_id<span class="operator">=</span>customers.cust_id</span><br><span class="line">)<span class="keyword">as</span> orders</span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cust_name;</span><br></pre></td></tr></table></figure><h2 id="联结表-where，join"><a href="#联结表-where，join" class="headerlink" title="联结表[where，join]"></a>联结表[where，join]</h2><ul><li>联结是利用SQL的select能执行的最重要的操作</li><li>关系表，主键，外键的概念</li><li>使用联结的目的：数据存储在多个表需要检索时就应该使用联结</li><li>联结能够维护引用完整性，维护引用完整性是通过在表的定义中指定主键和外键来实现的</li><li>where vendors.vend_id&#x3D;products.vend_idl联结了两个表</li></ul><h3 id="内部联结join"><a href="#内部联结join" class="headerlink" title="内部联结join"></a>内部联结join</h3><ul><li>基于两个表之间的相等测试叫等值联结，也称为内部联结</li><li>inner join效果和用where联结差不多</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">from</span> vendors <span class="keyword">inner</span> <span class="keyword">join</span> products</span><br><span class="line"><span class="keyword">on</span> vendors.vend_id<span class="operator">=</span>products.vend_id;</span><br></pre></td></tr></table></figure><h2 id="创建高级联结-left-join，right-join"><a href="#创建高级联结-left-join，right-join" class="headerlink" title="创建高级联结[left join，right join]"></a>创建高级联结[left join，right join]</h2><h3 id="别名as"><a href="#别名as" class="headerlink" title="别名as"></a>别名as</h3><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><ul><li>不止一次引用同一张表</li><li>1.子查询，2.自联结；查同一张表自联结效率比子查询高</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#子查询</span><br><span class="line"><span class="keyword">select</span> prod_id,prod_name</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> vend_id<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">select</span> vend_id</span><br><span class="line">    <span class="keyword">from</span> products</span><br><span class="line">    <span class="keyword">where</span> prod_id <span class="operator">=</span><span class="string">&#x27;DTNTR&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#自联结</span><br><span class="line"><span class="keyword">select</span> p1.prod_id,p1.prod_name</span><br><span class="line"><span class="keyword">from</span> products <span class="keyword">as</span> p1,products <span class="keyword">as</span> p2</span><br><span class="line"><span class="keyword">where</span> p1.vend_id<span class="operator">=</span>p2.vend_id</span><br><span class="line"><span class="keyword">and</span> p2.prod_id<span class="operator">=</span><span class="string">&#x27;DTNTR&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><ul><li>在上述基础上将重复的列去掉</li><li>实现方式：1.唯一的列用通配符   *  ，比如c.*；2.对所有其他表的列使用明确的子集来完成</li></ul><h3 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h3><ul><li><p>outer join必须配合left和right使用</p></li><li><p>内部联结查询所有客户和订单</p></li><li><p>外部联机查询所有客户，包括哪些没有订单的客户</p></li><li><p>分析：左表客户，右表订单，left outer join就是从from左表查询所有的数据</p></li><li><p>left join是left outer join的缩写</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_id,orders.order_num</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> customers.cust_id<span class="operator">=</span>orders.cust_id;</span><br></pre></td></tr></table></figure><h2 id="组合查询-union"><a href="#组合查询-union" class="headerlink" title="组合查询[union]"></a>组合查询[union]</h2><ul><li>组合查询通常称为并或者复合查询</li><li>使用组合查询的情况：<ul><li>在单个查询中从不同的表返回类似结构的数据</li><li>对单个表执行多个查询，按单个查询返回数据</li></ul></li><li>where也能完成组合查询的功能</li><li>union规则：<ul><li>两条以上select语句，语句之间关键字用union分开</li><li>union中每个查询必须包含相同的列，表达式或者聚集函数</li><li>列数据必须兼容</li></ul></li><li>union会去掉重复数据，union all可以保留重复的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> web </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Your Hexo Blog</title>
      <link href="/2023/03/02/build_hexo_blog/"/>
      <url>/2023/03/02/build_hexo_blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Build-your-website-with-hexo"><a href="#Build-your-website-with-hexo" class="headerlink" title="Build your website with hexo"></a>Build your website with hexo</h1><h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li>Github: <a href="https://github.com/">https://github.com/</a></li><li>hexo: <a href="https://hexo.io/">https://hexo.io/</a></li><li>hexo butterfly theme: <a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li><li>typora markdown: <a href="https://typora.io/">https://typora.io/</a></li><li>markdown image upload to github: <a href="https://support.typora.io/Upload-Image/#upgit-open-source--lightweight-native-for-windows--linux--macos">https://support.typora.io/Upload-Image/#upgit-open-source--lightweight-native-for-windows--linux--macos</a></li></ul><h3 id="Commands-of-Hexo"><a href="#Commands-of-Hexo" class="headerlink" title="Commands of Hexo"></a>Commands of Hexo</h3><ul><li>some useful commands:</li><li>generate static files: <code>hexo generate</code></li><li>run server on local machine: <code>hexo server</code></li><li>upload to github and deploy: <code>hexo deploy</code></li><li>clean static files( for example after change the theme): <code>hexo clean</code></li></ul><h3 id="Beautify-Blog"><a href="#Beautify-Blog" class="headerlink" title="Beautify Blog"></a>Beautify Blog</h3><ul><li>Beautify the web page: <a href="https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80">https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80</a></li><li>Icons fontawesome: <a href="https://fontawesome.com/">https://fontawesome.com/</a></li><li>hexo local document search: <a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></li><li>if use document search, add <code>indexing: false</code> to front matter yaml to exclude this document from searching</li></ul><h2 id="BLOG"><a href="#BLOG" class="headerlink" title="BLOG"></a>BLOG</h2><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment"># build your hexo blog</span></span><br><span class="line"><span class="attr">date:</span> <span class="comment"># 2023-03-02</span></span><br><span class="line"><span class="attr">updated:</span> <span class="comment"># 2023-03-02</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment"># &quot;tags&quot; has no order and level</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">github</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">blog</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">butterfly</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment"># &quot;categories has order and level&quot;</span></span><br><span class="line"><span class="comment"># so if cate2 is a sub category of cate1</span></span><br><span class="line"><span class="comment"># we should write like this: -[cate1,cate2]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># maybe for search engine, Idon&#x27;t know</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">github</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">website</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">an</span> <span class="string">introduction</span> <span class="string">about</span> <span class="string">how</span> <span class="string">to</span> <span class="string">build</span> <span class="string">your</span> <span class="string">own</span> <span class="string">blog</span> <span class="string">website</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="comment"># top image of this article</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">cover:</span> <span class="comment"># cover of this article</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">toc_number:</span></span><br><span class="line"><span class="attr">toc_style_simple:</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line"><span class="attr">copyright_author:</span></span><br><span class="line"><span class="attr">copyright_author_href:</span></span><br><span class="line"><span class="attr">copyright_url:</span></span><br><span class="line"><span class="attr">copyright_info:</span></span><br><span class="line"><span class="attr">mathjax:</span> </span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">False</span> <span class="comment"># default in the config.yml</span></span><br><span class="line"><span class="comment"># highlight_shrink true: hide the code block</span></span><br><span class="line"><span class="attr">aside:</span> <span class="literal">true</span> <span class="comment"># side bar of page</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/pigeonde/pigeonde.images/main/2023/03/upgit_20230303_1677798893.png" alt="image-20230303001453201"></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
